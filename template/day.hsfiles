{-# START_FILE .stylish-haskell.yaml #-}
steps:
  - simple_align:
      cases: true
      top_level_patterns: true
      records: true
  - imports:
      align: global
      list_align: after_alias
      long_list_align: inline
      empty_list_align: inherit
      list_padding: 4
      separate_lists: true
  - language_pragmas:
      style: vertical
      align: true
      remove_redundant: true
  - tabs:
      spaces: 4
  - trailing_whitespace: {}
columns: 80
newline: native

{-# START_FILE {{name}}.cabal #-}
cabal-version:        3.0

name:                 {{name}}
version:              1
synopsis:             Advent of Code 2022
description:          Haskell solutions for Advent of Code 2022
homepage:             https://github.com/frankhjung/haskell-aoc2022/-/blob/main/README.md
license:              GPL-3.0-only
author:               Frank H Jung
maintainer:           frankhjung@linux.com
copyright:            Copyright © 2022 Frank H Jung
category:             education
build-type:           Simple
extra-source-files:   README.md

library
  hs-source-dirs:     src
  default-language:   Haskell2010
  ghc-options:        -Wall
  exposed-modules:    Solve
  build-depends:      base >= 4 && < 5
                    , attoparsec >= 0.14 && < 0.15
                    , split >= 0.2 && < 0.3
                    , text >= 1.2 && < 1.3

executable            main
  hs-source-dirs:     .
                    , src
  main-is:            Main.hs
  default-language:   Haskell2010
  ghc-options:        -Wall
  other-modules:      Solve
  build-depends:      base
                    , attoparsec >= 0.14 && < 0.15
                    , split >= 0.2 && < 0.3
                    , text >= 1.2 && < 1.3

test-suite            test
  hs-source-dirs:     test
                    , src
  main-is:            Test.hs
  default-language:   Haskell2010
  ghc-options:        -Wall
  type:               exitcode-stdio-1.0
  other-modules:      Solve
  build-depends:      base
                    , attoparsec >= 0.14 && < 0.15
                    , hspec >= 2.7 && < 2.9
                    , split >= 0.2 && < 0.3
                    , text >= 1.2 && < 1.3

{-# START_FILE stack.yaml #-}
---
resolver: lts-19.27
arch: x86_64
flags: {}
packages: ['.']
allow-newer: true
extra-deps:
  - attoparsec-0.14.4
  - hspec-2.8.5
  - split-0.2.3.4
  - text-1.2.5.0

{-# START_FILE Makefile #-}
#!/usr/bin/env make

SRC	:= $(wildcard *.hs **/*.hs)

.PHONY: default
default: check build test

.PHONY: check
check:	tags style lint

.PHONY: tags
tags:
	@echo tags ...
	@hasktags --ctags --extendedctag $(SRC)

.PHONY: style
style:
	@echo style ... $(SRC)
	@stylish-haskell --config=.stylish-haskell.yaml --inplace $(SRC)

.PHONY: lint
lint:
	@echo lint ...
	@hlint --color $(SRC)
	@cabal check

.PHONY: build
build:
	@echo build ...
	@stack build --verbosity info --pedantic

.PHONY: test
test:
	@echo test ...
	@stack test

.PHONY: exec
exec:
	@echo exec ...
	@stack exec main input.data

.PHONY: setup
setup:
	@stack path
	@stack query
	@stack ls dependencies

.PHONY: ghci
ghci:
	@stack ghci --ghci-options -Wno-type-defaults

clean:
	@stack clean
	@cabal clean
	@$(RM) tags
	@$(RM) $(wildcard *.hi **/*.hi)
	@$(RM) $(wildcard *.o **/*.o)
	@$(RM) $(wildcard *.prof **/*.prof)
	@$(RM) $(wildcard *.tix **/*.tix)

cleanall: clean
	@stack purge

{-# START_FILE README.md #-}
# Advent of Code 2022 - {{name}}

[{{name}} - xyz](https://adventofcode.com/2022/day/n)

## Part 1

## Part 2

{-# START_FILE Setup.hs #-}
import           Distribution.Simple
main = defaultMain

{-# START_FILE Main.hs #-}
{-|

Module      : Main
Description : Advent of Code 2022 {{name}}
Copyright   : © Frank Jung, 2022
License     : GPL-3

-}

module Main (main) where

import           Solve              (solve, solve2)
import           System.Environment (getArgs)

-- Get filename from command line argument.
main :: IO ()
main = do
  args <- getArgs
  contents <- readFile (head args)
  print (solve contents)
  print (solve2 contents)

{-# START_FILE src/Solve.hs #-}
{-|

Module      : Solve
Description : Advent of Code 2022 {{name}}
Copyright   : © Frank Jung, 2022
License     : GPL-3

-}

module Solve ( solve
             , solve2) where

-- | Solve puzzle for {{name}} - part 1
solve :: String -> Int
solve = sum . map read . lines

-- | Solve puzzle for {{name}} - part 2
solve2 :: String -> Int
solve2 = sum . map read . lines

{-# START_FILE test/Test.hs #-}
module Main (main) where

import           Solve      (solve, solve2)
import           Test.Hspec (context, describe, hspec, it, shouldBe)

main :: IO ()
main = hspec $ do
  describe "{{name}}" $ do
    context "part 1" $
      it "expect sum of input to be 600" $ do
        contents <- readFile "test.data"
        solve contents `shouldBe` 600
    context "part 2" $
      it "expect sum of input to be 600" $ do
        contents <- readFile "test.data"
        solve2 contents `shouldBe` 600

{-# START_FILE test.data #-}
100
200
300
